<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yhcrt.healthcloud.memberBack.mapper.MemberBackMapper">
	<resultMap id="BaseResultMap" type="com.yhcrt.healthcloud.memberBack.entity.MemberBack">
		<id column="member_id" jdbcType="INTEGER" property="memberId" />
		<result column="head_pic" jdbcType="VARCHAR" property="headPic" />
		<result column="real_name" jdbcType="VARCHAR" property="realName" />
		<result column="gender" jdbcType="INTEGER" property="gender" />
		<result column="nick_name" jdbcType="VARCHAR" property="nickName" />
		<result column="identity_card" jdbcType="VARCHAR" property="identityCard" />
		<result column="phone_no" jdbcType="VARCHAR" property="phoneNo" />
		<result column="email" jdbcType="VARCHAR" property="email" />
		<result column="create_user" jdbcType="VARCHAR" property="createUser" />
		<result column="create_time" jdbcType="VARCHAR" property="createTime" />
		<result column="update_time" jdbcType="VARCHAR" property="updateTime" />
		<result column="member_type" jdbcType="INTEGER" property="memberType" />
		<result column="org_id" jdbcType="INTEGER" property="orgId" />
		<result column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="emp_id" jdbcType="INTEGER" property="empId" />
		<result column="doc_id" jdbcType="INTEGER" property="docId" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="remark" jdbcType="VARCHAR" property="remark" />
		<result column="emp_name" jdbcType="VARCHAR" property="empName" />
		<result column="doc_name" jdbcType="VARCHAR" property="docName" />
		
		<association property="org" column="org_id" select="com.yhcrt.healthcloud.organization.mapper.OrganizationMapper.selectByPrimaryKey"></association>
		<association property="user" column="user_id" select="com.yhcrt.healthcloud.system.mapper.SysUserMapper.selectByPrimaryKey"></association>
		<association property="memberInfo" column="member_id" select="com.yhcrt.healthcloud.memberBack.mapper.MemberInfoMapper.selectByMemberId"></association>
		<association property="contactList" column="member_id" select="com.yhcrt.healthcloud.memberBack.mapper.MemberContactMapper.selectByMemberId"></association>
	</resultMap>
	
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" separator="," close=")">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" separator="," close=")">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		member_id, head_pic, real_name, gender, nick_name, identity_card, phone_no, email, create_user, 
		create_time, update_time, member_type, org_id, user_id, emp_id, doc_id, status, remark
	</sql>
	
	<select id="selectByExample" parameterType="com.yhcrt.healthcloud.memberBack.entity.MemberExampleBack" resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from member
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from member
		where member_id = #{memberId,jdbcType=INTEGER}
	</select>
	
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from member where member_id = #{memberId,jdbcType=INTEGER}
	</delete>
	
	<delete id="deleteByExample" parameterType="com.yhcrt.healthcloud.memberBack.entity.MemberExampleBack">
		delete from member
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	
	<insert id="insert" parameterType="com.yhcrt.healthcloud.memberBack.entity.MemberBack">
		insert into member (member_id, head_pic, real_name, gender, nick_name, identity_card,
		phone_no, email, create_user, create_time, update_time, member_type, org_id, user_id, 
		emp_id, doc_id, status, remark)
		values (#{memberId,jdbcType=INTEGER}, #{headPic,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR},
		#{gender,jdbcType=INTEGER}, #{nickName,jdbcType=VARCHAR}, #{identityCard,jdbcType=VARCHAR},
		#{phoneNo,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},	#{createUser,jdbcType=VARCHAR},
		#{createTime,jdbcType=VARCHAR}, #{updateTime,jdbcType=VARCHAR}, #{memberType,jdbcType=INTEGER},
		#{orgId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{empId,jdbcType=INTEGER},
		#{docId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR})
	</insert>
	
	<insert id="insertSelective" parameterType="com.yhcrt.healthcloud.memberBack.entity.MemberBack">
		insert into member
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="memberId != null">
				member_id,
			</if>
			<if test="headPic != null">
				head_pic,
			</if>
			<if test="realName != null">
				real_name,
			</if>
			<if test="gender != null">
				gender,
			</if>
			<if test="nickName != null">
				nick_name,
			</if>
			<if test="identityCard != null">
				identity_card,
			</if>
			<if test="phoneNo != null">
				phone_no,
			</if>
			<if test="email != null">
				email,
			</if>
			<if test="createUser != null">
				create_user,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="updateTime != null">
				update_time,
			</if>
			<if test="memberType != null">
				member_type,
			</if>
			<if test="orgId != null">
				org_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="empId != null">
				emp_id,
			</if>
			<if test="docId != null">
				doc_id,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="remark != null">
				remark,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="memberId != null">
				#{memberId,jdbcType=INTEGER},
			</if>
			<if test="headPic != null">
				#{headPic,jdbcType=VARCHAR},
			</if>
			<if test="realName != null">
				#{realName,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				#{gender,jdbcType=INTEGER},
			</if>
			<if test="nickName != null">
				#{nickName,jdbcType=VARCHAR},
			</if>
			<if test="identityCard != null">
				#{identityCard,jdbcType=VARCHAR},
			</if>
			<if test="phoneNo != null">
				#{phoneNo,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				#{email,jdbcType=VARCHAR},
			</if>
			<if test="createUser != null">
				#{createUser,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=VARCHAR},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=VARCHAR},
			</if>
			<if test="memberType != null">
				#{memberType,jdbcType=INTEGER},
			</if>
			<if test="orgId != null">
				#{orgId,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="empId != null">
				#{empId,jdbcType=INTEGER},
			</if>
			<if test="docId != null">
				#{docId,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="remark != null">
				#{remark,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	
	<select id="countByExample" parameterType="com.yhcrt.healthcloud.memberBack.entity.MemberExampleBack" resultType="java.lang.Long">
		select count(*) from member
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	
	<update id="updateByExampleSelective" parameterType="map">
		update member
		<set>
			<if test="record.memberId != null">
				member_id = #{record.memberId,jdbcType=INTEGER},
			</if>
			<if test="record.headPic != null">
				head_pic = #{record.headPic,jdbcType=VARCHAR},
			</if>
			<if test="record.realName != null">
				real_name = #{record.realName,jdbcType=VARCHAR},
			</if>
			<if test="record.gender != null">
				gender = #{record.gender,jdbcType=INTEGER},
			</if>
			<if test="record.nickName != null">
				nick_name = #{record.nickName,jdbcType=VARCHAR},
			</if>
			<if test="record.identityCard != null">
				identity_card = #{record.identityCard,jdbcType=VARCHAR},
			</if>
			<if test="record.phoneNo != null">
				phone_no = #{record.phoneNo,jdbcType=VARCHAR},
			</if>
			<if test="record.email != null">
				email = #{record.email,jdbcType=VARCHAR},
			</if>
			<if test="record.createUser != null">
				create_user = #{record.createUser,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null">
				create_time = #{record.createTime,jdbcType=VARCHAR},
			</if>
			<if test="record.updateTime != null">
				update_time = #{record.updateTime,jdbcType=VARCHAR},
			</if>
			<if test="record.memberType != null">
				member_type = #{record.memberType,jdbcType=INTEGER},
			</if>
			<if test="record.orgId != null">
				org_id = #{record.orgId,jdbcType=INTEGER},
			</if>
			<if test="record.userId != null">
				user_id = #{record.userId,jdbcType=INTEGER},
			</if>
			<if test="record.empId != null">
				emp_id = #{record.empId,jdbcType=INTEGER},
			</if>
			<if test="record.docId != null">
				doc_id = #{record.docId,jdbcType=INTEGER},
			</if>
			<if test="record.status != null">
				status = #{record.status,jdbcType=INTEGER},
			</if>
			<if test="record.remark != null">
				remark = #{record.remark,jdbcType=VARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	
	<update id="updateByExample" parameterType="map">
		update member
		set member_id = #{record.memberId,jdbcType=INTEGER},
		head_pic = #{record.headPic,jdbcType=VARCHAR},
		real_name = #{record.realName,jdbcType=VARCHAR},
		gender = #{record.gender,jdbcType=INTEGER},
		nick_name = #{record.nickName,jdbcType=VARCHAR},
		identity_card = #{record.identityCard,jdbcType=VARCHAR},
		phone_no = #{record.phoneNo,jdbcType=VARCHAR},
		email = #{record.email,jdbcType=VARCHAR},
		create_user = #{record.createUser,jdbcType=VARCHAR},
		create_time = #{record.createTime,jdbcType=VARCHAR},
		update_time = #{record.updateTime,jdbcType=VARCHAR},
		member_type = #{record.memberType,jdbcType=INTEGER},
		org_id = #{record.orgId,jdbcType=INTEGER},
		user_id = #{record.userId,jdbcType=INTEGER},
		emp_id = #{record.empId,jdbcType=INTEGER},
		doc_id = #{record.docId,jdbcType=INTEGER},
		status = #{record.status,jdbcType=INTEGER},
		remark = #{record.remark,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	
	<update id="updateByPrimaryKeySelective" parameterType="com.yhcrt.healthcloud.memberBack.entity.MemberBack">
		update member
		<set>
			<if test="headPic != null">
				head_pic = #{headPic,jdbcType=VARCHAR},
			</if>
			<if test="realName != null">
				real_name = #{realName,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				gender = #{gender,jdbcType=INTEGER},
			</if>
			<if test="nickName != null">
				nick_name = #{nickName,jdbcType=VARCHAR},
			</if>
			<if test="identityCard != null">
				identity_card = #{identityCard,jdbcType=VARCHAR},
			</if>
			<if test="phoneNo != null">
				phone_no = #{phoneNo,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="createUser != null">
				create_user = #{createUser,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=VARCHAR},
			</if>
			<if test="memberType != null">
				member_type = #{memberType,jdbcType=INTEGER},
			</if>
			<if test="orgId != null">
				org_id = #{orgId,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="empId != null">
				emp_id = #{empId,jdbcType=INTEGER},
			</if>
			<if test="docId != null">
				doc_id = #{docId,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="remark != null">
				remark = #{remark,jdbcType=VARCHAR},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime,jdbcType=VARCHAR}
			</if>
		</set>
		where member_id = #{memberId,jdbcType=INTEGER}
	</update>
	
	<update id="updateByPrimaryKey" parameterType="com.yhcrt.healthcloud.memberBack.entity.MemberBack">
		update member
		set head_pic = #{headPic,jdbcType=VARCHAR},
		real_name = #{realName,jdbcType=VARCHAR},
		gender = #{gender,jdbcType=INTEGER},
		nick_name = #{nickName,jdbcType=VARCHAR},
		identity_card = #{identityCard,jdbcType=VARCHAR},
		phone_no = #{phoneNo,jdbcType=VARCHAR},
		email = #{email,jdbcType=VARCHAR},
		create_user = #{createUser,jdbcType=VARCHAR},
		create_time = #{createTime,jdbcType=VARCHAR},
		update_time = #{updateTime,jdbcType=VARCHAR},
		member_type = #{memberType,jdbcType=INTEGER},
		org_id = #{orgId,jdbcType=INTEGER},
		user_id = #{userId,jdbcType=INTEGER},
		emp_id = #{empId,jdbcType=INTEGER},
		doc_id = #{docId,jdbcType=INTEGER},
		status = #{status,jdbcType=INTEGER},
		remark = #{remark,jdbcType=VARCHAR}
		where member_id = #{memberId,jdbcType=INTEGER}
	</update>
	
	<select id="search" parameterType="map" resultMap="BaseResultMap">
		select
		member.org_id,sys.user_id,member.member_id,member.real_name,member.identity_card,
		member.phone_no,member.gender
		from member member,sys_user sys
		<if test="imei !=null and imei!='' ">
			,member_device device
		</if>
		where 1=1
		<if test="orgId_list !=null and orgId_list.size()>0">
			and member.org_id in
			<foreach item="item" collection="orgId_list" index="index" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="imei !=null and imei!='' ">
			and device.imei LIKE CONCAT('%',#{imei},'%') 
		</if>
		<if test="identity_card !=null and identity_card !='' ">
			and member.identity_card LIKE CONCAT('%',#{identity_card},'%') 
		</if>
		<if test="realName !=null and realName !='' ">
			and member.real_name LIKE CONCAT('%',#{realName},'%')
		</if>
		and member.status = #{status}
		and sys.user_id = member.user_id
		<if test="imei !=null and imei!='' ">
			and device.member_id = member.member_id
		</if>
		order by member.update_time desc,member_id desc
	</select>
	
	<select id="selectByEmpId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from member
		where emp_id = #{empId,jdbcType=INTEGER}
	</select>
	
	<select id="countByEmpId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		select count(member_id) from member where emp_id = #{empId} and status = 0
	</select>
	
	<select id="selectNameByMemberId" parameterType="java.lang.Integer" resultType="String">
		select real_name from member where member_id = #{memberId,jdbcType=INTEGER}
	</select>
	
	<select id="selectByDocId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from member
		where doc_id = #{docId,jdbcType=INTEGER}
	</select>
	
	<select id="countByDocId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		select count(member_id) from member where doc_id = #{docId} and status = 0
	</select>
	
	<!-- 查询未绑定机构的会员 -->
	<select id="queryByNameAndCard" parameterType="map" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from member
		where org_id is null and status = 0 
		<if test="realName !=null and realName !='' ">
			and real_name LIKE CONCAT('%',#{realName},'%')
		</if>
		<if test="identityCard !=null and identityCard !='' ">
			and identity_card LIKE CONCAT('%',#{identityCard},'%') 
		</if>
		<if test="phoneNo !=null and phoneNo !='' ">
			and phone_no LIKE CONCAT('%',#{phoneNo},'%')
		</if>
		order by create_time desc
	</select>
	
	<!-- 查询该员工所属机构及旗下机构中可分配的会员 -->
	<select id="queryByEid" parameterType="map" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from member						<!-- 查询所有的可分配的或者已分配的会员 -->
		where status = #{status} and (emp_id is null or emp_id = #{empId}) 
		<if test="orgIdList !=null and orgIdList.size()>0">
			and org_id in
			<foreach item="item" collection="orgIdList" index="index" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<!-- 排除移动到已分配会员中的会员 -->
		<if test="memberIdList !=null and memberIdList.size()>0">
			and member_id not in
			<foreach item="item" collection="memberIdList" index="index" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="realName !=null and realName !='' ">
			and real_name LIKE CONCAT('%',#{realName},'%')
		</if>
		<if test="phoneNo !=null and phoneNo !='' ">
			and phone_no LIKE CONCAT('%',#{phoneNo},'%')
		</if>
		order by create_time desc
	</select>
	
	<!-- 查询该医师所属机构及旗下机构中可分配的或已分配的会员 -->
	<select id="queryByDid" parameterType="com.yhcrt.healthcloud.memberBack.entity.MemberBack" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from member						<!-- 查询所有的可分配的或者已分配的会员 -->
		where status = #{status} and (doc_id is null or doc_id = #{docId}) 
		<if test="orgIdList !=null and orgIdList.size()>0">
			and org_id in
			<foreach item="item" collection="orgIdList" index="index" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<!-- 排除移动到已分配会员中的会员 -->
		<if test="memberIdList !=null and memberIdList.size()>0">
			and member_id not in
			<foreach item="item" collection="memberIdList" index="index" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="realName !=null and realName !='' ">
			and real_name LIKE CONCAT('%',#{realName},'%')
		</if>
		<if test="phoneNo !=null and phoneNo !='' ">
			and phone_no LIKE CONCAT('%',#{phoneNo},'%')
		</if>
		order by create_time desc
	</select>
	
	<!-- 不管是分配还是移除 首先将会员表中empId清空 -->
	<update id="updateByEmpId" parameterType="map">
		update member set emp_id = null where emp_id = #{empId}
	</update>
	
	<!-- 批量分配或移除 -->
	<update id="updateBatchEid" parameterType="map">
		update member set update_time = #{updateTime}, emp_id = #{empId}
		where member_id in 
		<foreach item="id" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach> 
	</update>
	
	<!-- 不管是分配还是移除 首先将会员表中docId清空  -->
	<update id="updateByDocId" parameterType="map">
		update member set doc_id = null where doc_id = #{docId}
	</update>
	
	<!-- 医师批量分配或移除会员 -->
	<update id="updateBatchDid" parameterType="map">
		update member set update_time = #{updateTime}, doc_id = #{docId}
		where member_id in 
		<foreach item="id" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach> 
	</update>
	
	<!-- 根据memberId查询会员个人信息 -->
	<select id="queryByMemberId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select a.member_id, a.head_pic, a.real_name, a.gender, a.nick_name, 
		a.identity_card, a.phone_no, a.email, a.member_type, a.org_id, a.user_id, 
		a.status, a.remark, b.real_name emp_name, c.real_name doc_name 
		from member a  
		left join employee b on a.emp_id=b.emp_id
		left join doctor c on a.doc_id=c.doc_id
		where a.member_id=#{0}
	</select>
	
    <select id="queryByTel" parameterType="string" resultMap="BaseResultMap">
		select a.member_id, a.head_pic, a.real_name, a.gender, a.nick_name, 
		a.identity_card, a.phone_no, a.email, a.member_type, a.org_id, a.user_id, 
		a.status, a.remark, b.real_name emp_name, c.real_name doc_name 
		from member a  
		left join employee b on a.emp_id=b.emp_id
		left join doctor c on a.doc_id=c.doc_id
		left join member_device d on a.member_id=d.member_id
		where a.phone_no=#{0} or d.sim=#{0}  limit 0,1
	</select>
	
	<!-- 为用户服务的人员 -->
	<select id="getByMemberId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select b.org_id, b.real_name, b.sex gender, b.phone_no,'1' as status from member a 
		inner join employee b on a.emp_id = b.emp_id
		where a.`status` = '0' and b.`status` = '0' and a.member_id = #{0}
		UNION ALL 
		select b.org_id, b.real_name, b.sex gender, b.phone_no,'2' as status from member a
		inner join doctor b on a.doc_id = b.doc_id 
		where a.`status` = '0' and b.`status` = '0' and a.member_id = #{0}
	</select>
	
</mapper>