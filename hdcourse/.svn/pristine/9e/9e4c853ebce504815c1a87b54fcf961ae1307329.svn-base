package com.whty.assis.api.controller;

import com.whty.assis.api.model.TUserBackground;
import com.whty.assis.api.service.TUserBackgroundService;
import com.whty.assis.api.service.UserBackgroundPicService;
import com.whty.assis.base.controller.BaseController;
import com.whty.assis.base.exception.BusinessException;
import com.whty.common.util.CommonFunction;
import com.whty.common.util.Constants;
import net.sf.json.JSONObject;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.http.Consts;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.InputStreamBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.util.*;

@Controller
@RequestMapping("/api/tuserBackGround")
public class TUserBackgroundController  extends BaseController {

    @Autowired
    private TUserBackgroundService tUserBackgroundService;
    @Autowired
    private UserBackgroundPicService userBackgroundPicService;

    /**
     * 查询用户背景图片列表，互动课堂根据用户的登录信息，在工具-背景页面加载用户自定义的背景图片列表。
     * @param request
     * @param response
     * @param body（platformCode，loginPlatformCode，userId）
     */
    @RequestMapping(value = "getUserBackGround", method = RequestMethod.POST)
    @ResponseBody
    public void getUserBackGround(HttpServletRequest request, HttpServletResponse response, @RequestBody String body)throws IOException {
        Map<String, Object> result = new HashMap<>();
        try {
            Map<String, Object> paramMap = new HashMap<>();
            JSONObject reqJson = JSONObject.fromObject((body == null || body.equals("")) ? "{}" : body);
            // 参数检验
            if (!CommonFunction.isNotNull(reqJson)) {
                throw new BusinessException("参数不存在");
            }
            paramMap.put("userId", reqJson.get("userId"));
            paramMap.put("platformCode", reqJson.get("platformCode"));
            paramMap.put("loginPlatformCode", reqJson.get("loginPlatformCode"));
            // 必填字段检查
            CommonFunction.checkParam(paramMap);

            String userId = paramMap.get("userId").toString();
            String platformCode = paramMap.get("platformCode").toString();
            String loginPlatformCode = paramMap.get("loginPlatformCode").toString();

            TUserBackground entity = new TUserBackground();
            entity.setPlatformCode(platformCode);
            entity.setLoginPlatformCode(loginPlatformCode);
            entity.setUserId(userId);

            entity = tUserBackgroundService.getListByTUserBackground(entity);
            result.put("result", Constants.SUCCESS_CODE);
            result.put("resultDesc", "成功");
            result.put("backgroundCode", entity.getBackgroundCode());
            result.put("stretch", entity.getStretch());
            result.put("sortNum", entity.getSortNum());
            result.put("Createtime", entity.getCreateTime());
        } catch (BusinessException e) {
            result.put("result", Constants.FAIL_CODE);
            result.put("resultDesc", "失败");
            e.printStackTrace();
        }
        CommonFunction.writeResp(response, JSONObject.fromObject(result).toString());
    }

    /**
     * 用户新增自定义背景图片，用户在工具-背景页面添加自定义背景，上传图片。
     * @param request
     * @param response
     * @param body（platformCode，loginPlatformCode，userId）
     */
    @RequestMapping(value = "uploadPic", method = RequestMethod.POST)
    @ResponseBody
    public void uploadPic(HttpServletRequest request, HttpServletResponse response, @RequestBody String body)throws IOException {
        if (ServletFileUpload.isMultipartContent(request)) {
            try {
                // 1. 创建DiskFileItemFactory对象，设置缓冲区大小和临时文件目录
                DiskFileItemFactory factory = new DiskFileItemFactory();
                // System.out.println(System.getProperty("java.io.tmpdir"));//默认临时文件夹
                // 2. 创建ServletFileUpload对象，并设置上传文件的大小限制。
                ServletFileUpload sfu = new ServletFileUpload(factory);
                //解决上传文件名的中文乱码
                sfu.setHeaderEncoding("UTF-8");
                sfu.setSizeMax(10 * 1024 * 1024);// 以byte为单位 不能超过10M 1024byte =
                // 1kb 1024kb=1M 1024M = 1G
                sfu.setHeaderEncoding("utf-8");
                // 3.调用ServletFileUpload.parseRequest方法解析request对象，得到一个保存了所有上传内容的List对象。

                List<FileItem> fileItemList = sfu.parseRequest(request);
                Iterator<FileItem> fileItems = fileItemList.iterator();
                // 4. 遍历list，每迭代一个FileItem对象，调用其isFormField方法判断是否是上传文件
                while (fileItems.hasNext()) {
                    FileItem fileItem = fileItems.next();
                    // 普通表单元素
                    if (fileItem.isFormField()) {
                        String name = fileItem.getFieldName();// name属性值
                        String value = fileItem.getString("utf-8");// name对应的value值
                        System.out.println(name + " = " + value);
                    }
                    // <input type="file">的上传文件的元素
                    else {
                        String fileName = fileItem.getName();// 文件名称
                        System.out.println("原文件名：" + fileName);// Koala.jpg
                        String suffix = fileName.substring(fileName.lastIndexOf('.'));
                        System.out.println("扩展名：" + suffix);// .jpg

                        // 新文件名（唯一）
                        String newFileName = new Date().getTime() + suffix;
                        System.out.println("新文件名：" + newFileName);// image\1478509873038.jpg

                        // 5. 调用FileItem的write()方法，写入文件

                        File file = new File("D:/lindaProjects/touxiang/" + newFileName);
                        System.out.println(file.getAbsolutePath());
                        fileItem.write(file);
                        // 6. 调用FileItem的delete()方法，删除临时文件
                        fileItem.delete();

                        CloseableHttpClient httpClient = HttpClients.createDefault();

                        HttpPost httpPost = new HttpPost("http://res.huijiaoyun.com:22022/cms-ft" + "/uploadify");

                        ContentType contentType = ContentType.create("text/plain", Consts.UTF_8);

                        InputStreamBody fileBody = new InputStreamBody(fileItem.getInputStream(), contentType);

                        StringBody userId = new StringBody("11614bf716184c83ae383a277393630f", contentType);

                        HttpEntity reqEntity = MultipartEntityBuilder.create().setCharset(Consts.UTF_8).setMode(HttpMultipartMode.BROWSER_COMPATIBLE).addPart("userId", userId)
                                .addPart("fileData", fileBody).build();

                        httpPost.setEntity(reqEntity);
                        CloseableHttpResponse cresponse = httpClient.execute(httpPost);
                        HttpEntity resEntity = cresponse.getEntity();
                        String ret = null;
                        if (resEntity != null) {
                            ret = EntityUtils.toString(resEntity);
                        }
                        EntityUtils.consume(resEntity);
                        System.out.println(ret);
                        logger.info(ret);
                        JSONObject jsonObject = JSONObject.fromObject(ret);
                        // Long fid = jsonObject.optLong("fid");
                        // System.out.println(fid);
                        String downUrl = jsonObject.optString("downUrl");
                        System.out.println(downUrl);
                    }
                }


            } catch (FileUploadException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        try{
            Map<String, Object> paramMap = new HashMap<>();
            JSONObject reqJson = JSONObject.fromObject((body == null || body.equals("")) ? "{}" : body);
            // 参数检验
            if (!CommonFunction.isNotNull(reqJson)) {
                throw new BusinessException("参数不存在");
            }
            paramMap.put("userId", reqJson.get("userId"));
            paramMap.put("platformCode", reqJson.get("platformCode"));
            paramMap.put("loginPlatformCode", reqJson.get("loginPlatformCode"));
            paramMap.put("backgroundCode", reqJson.get("backgroundCode"));
            paramMap.put("stretch", reqJson.get("stretch"));
            paramMap.put("sortNum", reqJson.get("sortNum"));
            // 必填字段检查
            CommonFunction.checkParam(paramMap);

            String userId = paramMap.get("userId").toString();
            String platformCode = paramMap.get("platformCode").toString();
            String loginPlatformCode = paramMap.get("loginPlatformCode").toString();
            String backgroundCode = paramMap.get("backgroundCode").toString();
            String stretch = paramMap.get("stretch").toString();
            String sortNum = paramMap.get("sortNum").toString();
            TUserBackground entity = new TUserBackground();
            entity.setPlatformCode(platformCode);
            entity.setLoginPlatformCode(loginPlatformCode);
            entity.setUserId(userId);
            entity.setBackgroundCode(backgroundCode);

        }catch (Exception e){
            e.printStackTrace();
        }



    }

    /**
     * 根据接口参数，对图片背景进行删除。调用这个接口时，后台应该要根据这个接口去删除服务器上的实体文件.
     * @param request
     * @param response
     * @param body（platformCode，loginPlatformCode，userId，backgroundCode）
     */
    @RequestMapping(value = "deleteUserBackGround", method = RequestMethod.POST)
    @ResponseBody
    public void deleteUserBackGround(HttpServletRequest request, HttpServletResponse response, @RequestBody String body)throws IOException {
        Map respMap = new HashMap();
        try {
            Map<String, Object> paramMap = new HashMap<>();
            JSONObject reqJson = JSONObject.fromObject((body == null || body.equals("")) ? "{}" : body);
            // 参数检验
            if (!CommonFunction.isNotNull(reqJson)) {
                throw new BusinessException("参数不存在");
            }
            paramMap.put("userId", reqJson.get("userId"));
            paramMap.put("platformCode", reqJson.get("platformCode"));
            paramMap.put("loginPlatformCode", reqJson.get("loginPlatformCode"));
            paramMap.put("backgroundCode", reqJson.get("backgroundCode"));
            // 必填字段检查
            CommonFunction.checkParam(paramMap);
            String backgroundCode = paramMap.get("backgroundCode").toString();
            tUserBackgroundService.delete(backgroundCode);
            respMap.put("result", Constants.SUCCESS_CODE);
            respMap.put("resultDesc", "成功");
        } catch (BusinessException e) {
            respMap.put("result", Constants.FAIL_CODE);
            respMap.put("resultMsg", e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            respMap.put("result", Constants.FAIL_CODE);
            respMap.put("resultMsg", e.getMessage());
            e.printStackTrace();
        }
        CommonFunction.writeResp(response, JSONObject.fromObject(respMap).toString());
    }

}
