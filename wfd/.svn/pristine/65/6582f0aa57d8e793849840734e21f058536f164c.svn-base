package com.whty.wfd.page.controller;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.whty.wfd.page.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.baidubce.auth.DefaultBceCredentials;
import com.baidubce.services.bos.BosClient;
import com.baidubce.services.bos.BosClientConfiguration;
import com.github.pagehelper.PageInfo;
import com.github.pagehelper.util.StringUtil;
import com.whty.wfd.base.controller.BaseController;
import com.whty.wfd.common.utils.GUIDGenerator;
import com.whty.wfd.page.dao.TUserMapper;
import com.whty.wfd.page.service.MessageService;
import com.whty.wfd.page.service.PostService;

import net.sf.json.JSONObject;
import sun.misc.BASE64Decoder;

/**
 * \* User: zjd \* Date: 2018/8/16 \* Time: 15:41 \* Description: \
 */
@Controller
public class MessageController extends BaseController {

	@Autowired
	private MessageService messageService;
	@Autowired
	private PostService postService;
	@Autowired
	private TUserMapper tUserMapper;

	final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	@RequestMapping(value = "sendMessage.html", method = RequestMethod.GET)
	public String sendMessage(ModelMap map, String postId, String content, Integer receiver, String plateId,
			String turn) {
		if (StringUtil.isEmpty(plateId)) {
			TPlatePost tPlatePost = postService.selectByKey(postId);
			plateId = tPlatePost.getPlateId();
			map.put("type", 1);
		} else {
			map.put("type", 2);
		}
		map.put("postId", postId);
		map.put("content", content);
		map.put("receiver", receiver);
		map.put("plateId", plateId);
		map.put("turn", turn);
		return "message/add_message";
	}

	@RequestMapping("addMessage")
	public String addMessage(HttpServletRequest request, String content, String postId, String[] path, Integer[] userId,
			Integer receiver, String turn,String[] myAudio,Integer[] taking) {
		TUser tUser = (TUser) request.getSession().getAttribute("userObj");
		try {
			BASE64Decoder decoder = new BASE64Decoder();
			String reg = "data:image/jpeg;base64,";
			String reg2 = "data:image/jpeg;base64";
			String regAudio="data:audio/aac;base64,";
			String regAudio2="data:audio/aac;base64";
			List<TPostMessageImg> tPostMessageImgs = new ArrayList<>();
			List<TPostMessageAudio> tPostMessageAudios = new ArrayList<>();
			TPostMessage tPostMessage = new TPostMessage();
			tPostMessage.setId(GUIDGenerator.getGUID());
			tPostMessage.setReceiver(receiver);
			tPostMessage.setCreateTime(new Date());
			tPostMessage.setContent(content);
			tPostMessage.setUpdateTime(new Date());
			tPostMessage.setPlatePostId(postId);
			tPostMessage.setUserId(tUser.getId());
			tPostMessage.setIsTop(false);
			tPostMessage.setIsRead(false);
			tPostMessage.setDelete(false);
			boolean type = false;
			if(myAudio!=null && myAudio.length>0){
				for (int i = 0; i < myAudio.length; i++) {
					if (regAudio2.equals(myAudio[i])) {
						type= true;
						continue;
					}
					String base64 = myAudio[i].replace(regAudio, "");
					byte[] imageByte = decoder.decodeBuffer(base64);
					String ak = "08da4fd5cf644d458c950b09bdb95666";
					String sk = "45876e2c7caf404a8e3f269d7aabb835";
					String bucketname = "whty";
					String pathProductName = "hdcourse";
					String pathVersion = "test";
					String baiduBosUrl = "http://whty.bj.bcebos.com/";
					Calendar cal = Calendar.getInstance();
					StringBuffer bosStringBuffer = new StringBuffer();
					bosStringBuffer.append(pathProductName).append("/").append(pathVersion).append("/")
							.append(cal.get(Calendar.YEAR)).append(cal.get(Calendar.MONTH))
							.append(cal.get(Calendar.DAY_OF_MONTH)).append("/").append(cal.getTime().getTime());
					BosClientConfiguration config = new BosClientConfiguration();
					config.setCredentials(new DefaultBceCredentials(ak, sk));
					BosClient client = new BosClient(config);
					client.putObject(bucketname, bosStringBuffer + ".aac", imageByte);// 上传到百度云
					String bosAddress = baiduBosUrl + bosStringBuffer + ".aac";// 图标地址
					System.out.println(bosAddress);

					TPostMessageAudio tPostMessageAudio = new TPostMessageAudio();
					if(type){
						tPostMessageAudio.setAudioUsetaking(taking[0]);
					}else{
						tPostMessageAudio.setAudioUsetaking(taking[i]);
					}
					tPostMessageAudio.setDownUrl(bosAddress);
					tPostMessageAudio.setPostMessageId(tPostMessage.getId());
					tPostMessageAudio.setCreateTime(new Date());
					tPostMessageAudio.setUpdateTime(new Date());
					tPostMessageAudios.add(tPostMessageAudio);
				}
			}
			if (path != null && path.length > 0) {
				for (int i = 0; i < path.length; i++) {
					if (reg2.equals(path[i])) {
						continue;
					}
					String base64 = path[i].replace(reg, "");
					byte[] imageByte = decoder.decodeBuffer(base64);
					/*
					 * //生成图片路径和文件名 String pathString
					 * ="F://imgFile/"+sdf.format(new Date())+"/"; String
					 * picName
					 * ="base64-"+(int)((Math.random()*9+1)*1000)+".jpg"; File
					 * filePath = new File(pathString); if (!filePath.exists())
					 * { filePath.mkdirs(); } OutputStream out =new
					 * FileOutputStream(pathString+picName);
					 * out.write(imageByte); out.flush(); out.close();
					 *
					 * File filePicName = new File(pathString+picName); String
					 * md5 = FileMDFive.getFileMD5(filePicName);
					 */
					String ak = "08da4fd5cf644d458c950b09bdb95666";
					String sk = "45876e2c7caf404a8e3f269d7aabb835";
					String bucketname = "whty";
					String pathProductName = "hdcourse";
					String pathVersion = "test";
					String baiduBosUrl = "http://whty.bj.bcebos.com/";
					Calendar cal = Calendar.getInstance();
					StringBuffer bosStringBuffer = new StringBuffer();
					bosStringBuffer.append(pathProductName).append("/").append(pathVersion).append("/")
							.append(cal.get(Calendar.YEAR)).append(cal.get(Calendar.MONTH))
							.append(cal.get(Calendar.DAY_OF_MONTH)).append("/").append(cal.getTime().getTime());
					BosClientConfiguration config = new BosClientConfiguration();
					config.setCredentials(new DefaultBceCredentials(ak, sk));
					BosClient client = new BosClient(config);

					client.putObject(bucketname, bosStringBuffer + ".jpg", imageByte);// 上传到百度云
					String bosAddress = baiduBosUrl + bosStringBuffer + ".jpg";// 图标地址
					System.out.println(bosAddress);
					TPostMessageImg tPostMessageImg = new TPostMessageImg();
					tPostMessageImg.setPostMessageId(tPostMessage.getId());
					tPostMessageImg.setDownUrl(bosAddress);
					tPostMessageImg.setMd5("1");
					tPostMessageImg.setCreateTime(new Date());
					tPostMessageImg.setUpdateTime(new Date());
					tPostMessageImg.setCreator(tUser.getId());
					tPostMessageImgs.add(tPostMessageImg);
				}
			}
			messageService.addMessage(tUser, tPostMessage, tPostMessageImgs, userId,tPostMessageAudios);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:getPostDetail?postId=" + postId + "&turn=" + turn;
	}

	@RequestMapping("getPostMessage.html")
	public String getPostMessage() {
		return "message/post_message";
	}

	@RequestMapping("getPostMessageList")
	@ResponseBody
	public void getPostMessage(HttpServletRequest request, HttpServletResponse response,
			@RequestParam(name = "pageNum", defaultValue = "1") Integer pageNum,
			@RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize) {
		TUser tUser = (TUser) request.getSession().getAttribute("userObj");
		PageInfo<TPostMessage> p = messageService.getPostMessagesByUserId(tUser.getId(), pageNum, pageSize);
		JSONObject obj = new JSONObject();
		for (TPostMessage tPostMessage : p.getList()) {
			tPostMessage.setCreateTimeStr(sdf.format(tPostMessage.getCreateTime()));
		}
		obj.put("list", p.getList());
		obj.put("pageNum", p.getPageNum());
		obj.put("pageTotal", p.getTotal());
		response.setCharacterEncoding("utf-8");
		response.setContentType("application/json; charset=utf-8");
		try {
			response.getWriter().print(obj);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@RequestMapping("getPostMessagesByPostId")
	@ResponseBody
	public void getPostMessagesByPostId(HttpServletResponse response, HttpServletRequest request, String postId,
			String orderByClause) {
		TUser tUser = (TUser) request.getSession().getAttribute("userObj");
		List<TPostMessage> tPostMessages = messageService.getPostMessagesByPostId(postId, tUser.getId(), orderByClause);
		JSONObject obj = new JSONObject();
		for (TPostMessage tPostMessage : tPostMessages) {
			tPostMessage.setCreateTimeStr(sdf.format(tPostMessage.getCreateTime()));
		}

//		if (orderByClause.equals("like_count desc")) {
//			Collections.sort(tPostMessages, new Comparator<TPostMessage>() {
//
//				@Override
//				public int compare(TPostMessage o1, TPostMessage o2) {
//					int like1 = o1.getLikeCount();
//					int like2 = o2.getLikeCount();
//
//					if (like2 > like1) {
//						return 1;
//					} else if (like2 == like1) {
//						return 0;
//					} else {
//						return -1;
//					}
//				}
//			});
//		}

		obj.put("list", tPostMessages);
		response.setCharacterEncoding("utf-8");
		response.setContentType("application/json; charset=utf-8");
		try {
			response.getWriter().print(obj);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// 删除评论
	@RequestMapping(value = "deleteMessageByMessageId", method = RequestMethod.GET)
	@ResponseBody
	public int deletePostByPostId(String messageId) {
		return messageService.updateByMessageId(messageId);
	}

	// 设置评论为最佳答案
	@RequestMapping(value = "bestAnswer", method = RequestMethod.GET)
	@ResponseBody
	public int bestAnswer(String messageId, boolean type) {
		return messageService.updateByMessageIdAnswer(messageId, type);
	}

	@RequestMapping(value = "updateMessage", method = RequestMethod.GET)
	public String updateMessage(HttpServletRequest request) {
		TUser tUser = (TUser) request.getSession().getAttribute("userObj");
		messageService.updateMessageIsRead(tUser.getId());
		return "redirect:index.html";
	}

}